<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource"></stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@db-test:1521:daactest</stringProp>
        <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">asf4D|\/|</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">asfadm</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Concurrent Fixed Center BBox 1+-.xxx" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Concurrent Fixed Center BBox 1+-.xxx" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="bbox coords" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west_deg" elementType="Argument">
                <stringProp name="Argument.name">west_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;-153&apos;,west_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west_min" elementType="Argument">
                <stringProp name="Argument.name">west_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,west_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${west_deg}&apos; + &apos;.&apos; + &apos;${west_min}&apos;, west )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_deg" elementType="Argument">
                <stringProp name="Argument.name">east_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${west_deg}+1,east_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_min" elementType="Argument">
                <stringProp name="Argument.name">east_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,east_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${east_deg}&apos; + &apos;.&apos; + &apos;${east_min}&apos;, east )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_deg" elementType="Argument">
                <stringProp name="Argument.name">south_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;65&apos;,south_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_min" elementType="Argument">
                <stringProp name="Argument.name">south_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,south_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${south_deg}&apos; + &apos;.&apos; + &apos;${south_min}&apos;, south )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_deg" elementType="Argument">
                <stringProp name="Argument.name">north_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${south_deg}+1,north_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_min" elementType="Argument">
                <stringProp name="Argument.name">north_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,north_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${north_deg}&apos; + &apos;.&apos; + &apos;${north_min}&apos;, north )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Consecutive Fixed Center BBox 1+-.xxx" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Consecutive Fixed Center BBox 1+-.xxx" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="bbox coords" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west_deg" elementType="Argument">
                <stringProp name="Argument.name">west_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;-153&apos;,west_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west_min" elementType="Argument">
                <stringProp name="Argument.name">west_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,west_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${west_deg}&apos; + &apos;.&apos; + &apos;${west_min}&apos;, west )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_deg" elementType="Argument">
                <stringProp name="Argument.name">east_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${west_deg}+1,east_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_min" elementType="Argument">
                <stringProp name="Argument.name">east_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,east_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${east_deg}&apos; + &apos;.&apos; + &apos;${east_min}&apos;, east )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_deg" elementType="Argument">
                <stringProp name="Argument.name">south_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;65&apos;,south_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_min" elementType="Argument">
                <stringProp name="Argument.name">south_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,south_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${south_deg}&apos; + &apos;.&apos; + &apos;${south_min}&apos;, south )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_deg" elementType="Argument">
                <stringProp name="Argument.name">north_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${south_deg}+1,north_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_min" elementType="Argument">
                <stringProp name="Argument.name">north_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,north_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${north_deg}&apos; + &apos;.&apos; + &apos;${north_min}&apos;, north )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Concurrent Fixed Center BBox 1+-.xxx with date platform filter" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Concurrent Fixed Center BBox 1+-.xxx with date platform filter" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND 
startTime BETWEEN TO_DATE(&apos;1998-01-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2000-01-01&apos;,&apos;YYYY-MM-DD&apos;) AND 
processingType IN (&apos;L0&apos;,&apos;L1&apos;) AND
  centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="bbox coords" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west_deg" elementType="Argument">
                <stringProp name="Argument.name">west_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;-153&apos;,west_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west_min" elementType="Argument">
                <stringProp name="Argument.name">west_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,west_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${west_deg}&apos; + &apos;.&apos; + &apos;${west_min}&apos;, west )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_deg" elementType="Argument">
                <stringProp name="Argument.name">east_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${west_deg}+1,east_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_min" elementType="Argument">
                <stringProp name="Argument.name">east_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,east_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${east_deg}&apos; + &apos;.&apos; + &apos;${east_min}&apos;, east )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_deg" elementType="Argument">
                <stringProp name="Argument.name">south_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;65&apos;,south_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_min" elementType="Argument">
                <stringProp name="Argument.name">south_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,south_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${south_deg}&apos; + &apos;.&apos; + &apos;${south_min}&apos;, south )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_deg" elementType="Argument">
                <stringProp name="Argument.name">north_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${south_deg}+1,north_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_min" elementType="Argument">
                <stringProp name="Argument.name">north_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,north_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${north_deg}&apos; + &apos;.&apos; + &apos;${north_min}&apos;, north )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Consecutive Fixed Center BBox 1+-.xxx with date platform filter" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Consecutive Fixed Center BBox 1+-.xxx with date platform filter" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND 
startTime BETWEEN TO_DATE(&apos;1998-01-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2000-01-01&apos;,&apos;YYYY-MM-DD&apos;) AND 
processingType IN (&apos;L0&apos;,&apos;L1&apos;) AND
  centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="bbox coords" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west_deg" elementType="Argument">
                <stringProp name="Argument.name">west_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;-153&apos;,west_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west_min" elementType="Argument">
                <stringProp name="Argument.name">west_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,west_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${west_deg}&apos; + &apos;.&apos; + &apos;${west_min}&apos;, west )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_deg" elementType="Argument">
                <stringProp name="Argument.name">east_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${west_deg}+1,east_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east_min" elementType="Argument">
                <stringProp name="Argument.name">east_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,east_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${east_deg}&apos; + &apos;.&apos; + &apos;${east_min}&apos;, east )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_deg" elementType="Argument">
                <stringProp name="Argument.name">south_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;65&apos;,south_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south_min" elementType="Argument">
                <stringProp name="Argument.name">south_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,south_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${south_deg}&apos; + &apos;.&apos; + &apos;${south_min}&apos;, south )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_deg" elementType="Argument">
                <stringProp name="Argument.name">north_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${south_deg}+1,north_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north_min" elementType="Argument">
                <stringProp name="Argument.name">north_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,50,north_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${north_deg}&apos; + &apos;.&apos; + &apos;${north_min}&apos;, north )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Concurrent Frame &amp; Path" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Concurrent Frame &amp; Path" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
platformType=&apos;A3&apos;  AND 
frameNumber=&apos;${frame}&apos; AND
pathNumber=&apos;${path}&apos;
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="vars" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="path" elementType="Argument">
                <stringProp name="Argument.name">path</stringProp>
                <stringProp name="Argument.value">${__Random(245,270,path)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame1" elementType="Argument">
                <stringProp name="Argument.name">frame1</stringProp>
                <stringProp name="Argument.value">${__Random(12,14,frame1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame2" elementType="Argument">
                <stringProp name="Argument.name">frame2</stringProp>
                <stringProp name="Argument.value">${__Random(0,9,frame2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame" elementType="Argument">
                <stringProp name="Argument.name">frame</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${frame1}&apos; + &apos;${frame2}&apos; + &apos;0&apos;, frame )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Concurrent Frame &amp; Path Range" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Concurrent Frame &amp; Path Range" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
platformType=&apos;A3&apos;  AND 
frameNumber BETWEEN ${frame_start} AND ${frame_end} AND
pathNumber BETWEEN ${path_start} AND ${path_end}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="vars" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="path" elementType="Argument">
                <stringProp name="Argument.name">path</stringProp>
                <stringProp name="Argument.value">${__Random(245,270,path)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame1" elementType="Argument">
                <stringProp name="Argument.name">frame1</stringProp>
                <stringProp name="Argument.value">${__Random(12,14,frame1)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame2" elementType="Argument">
                <stringProp name="Argument.name">frame2</stringProp>
                <stringProp name="Argument.value">${__Random(0,4,frame2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame_start" elementType="Argument">
                <stringProp name="Argument.name">frame_start</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${frame1}&apos; + &apos;${frame2}&apos; + &apos;0&apos;, frame_start )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame3" elementType="Argument">
                <stringProp name="Argument.name">frame3</stringProp>
                <stringProp name="Argument.value">${__Random(5,9,frame3)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="frame_end" elementType="Argument">
                <stringProp name="Argument.name">frame_end</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${frame1}&apos; + &apos;${frame3}&apos; + &apos;0&apos;, frame_end )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="path_start" elementType="Argument">
                <stringProp name="Argument.name">path_start</stringProp>
                <stringProp name="Argument.value">${__Random(245,250,path_start)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="path_end" elementType="Argument">
                <stringProp name="Argument.name">path_end</stringProp>
                <stringProp name="Argument.value">${__Random(251,270,path_end)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Consecutive Poly 4 points 1x1 with date &amp; platform filter" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1306955430000</longProp>
        <longProp name="ThreadGroup.end_time">1306955430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Consecutive Poly 4 points 1x1 with date &amp; platform filter" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal()
    from
      data_product
  WHERE
  startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;)
      AND sdo_anyinteract(shape,
        sdo_geometry(
          2003, 8307, NULL, sdo_elem_info_array(1, 1003, 1),
          sdo_ordinate_array(
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;,
&apos;${p2_lon}&apos;,&apos;${p2_lat}&apos;,
&apos;${p3_lon}&apos;,&apos;${p3_lat}&apos;,
&apos;${p4_lon}&apos;,&apos;${p4_lat}&apos;,
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;
))) = &apos;TRUE&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="latitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lat" elementType="Argument">
                <stringProp name="Argument.name">center_lat</stringProp>
                <stringProp name="Argument.value">${__Random(60,70,center_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat" elementType="Argument">
                <stringProp name="Argument.name">p1_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat}+0,p1_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat" elementType="Argument">
                <stringProp name="Argument.name">p2_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0.1,p2_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat" elementType="Argument">
                <stringProp name="Argument.name">p3_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0.1,p3_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat" elementType="Argument">
                <stringProp name="Argument.name">p4_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0,p4_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lon" elementType="Argument">
                <stringProp name="Argument.name">center_lon</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,center_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon" elementType="Argument">
                <stringProp name="Argument.name">p1_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon}+0,p1_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon" elementType="Argument">
                <stringProp name="Argument.name">p2_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0,p2_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon" elementType="Argument">
                <stringProp name="Argument.name">p3_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0.1,p3_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon" elementType="Argument">
                <stringProp name="Argument.name">p4_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0.1,p4_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="DB Consecutive Poly 6 points 1x1 with date and platform filter" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1306955430000</longProp>
        <longProp name="ThreadGroup.end_time">1306955430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Poly 6 points 1x1 with date &amp; platform filter" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal()
    from
      data_product
  WHERE
  startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;)
      AND sdo_anyinteract(shape,
        sdo_geometry(
          2003, 8307, NULL, sdo_elem_info_array(1, 1003, 1),
          sdo_ordinate_array(
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;,
&apos;${p2_lon}&apos;,&apos;${p2_lat}&apos;,
&apos;${p3_lon}&apos;,&apos;${p3_lat}&apos;,
&apos;${p4_lon}&apos;,&apos;${p4_lat}&apos;,
&apos;${p5_lon}&apos;,&apos;${p5_lat}&apos;,
&apos;${p6_lon}&apos;,&apos;${p6_lat}&apos;,
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;
))) = &apos;TRUE&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="latitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lat" elementType="Argument">
                <stringProp name="Argument.name">center_lat</stringProp>
                <stringProp name="Argument.value">${__Random(60,70,center_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat" elementType="Argument">
                <stringProp name="Argument.name">p1_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat}+0,p1_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat" elementType="Argument">
                <stringProp name="Argument.name">p2_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0.5,p2_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat" elementType="Argument">
                <stringProp name="Argument.name">p3_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+1,p3_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat" elementType="Argument">
                <stringProp name="Argument.name">p4_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0.5,p4_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat" elementType="Argument">
                <stringProp name="Argument.name">p5_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0,p5_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat" elementType="Argument">
                <stringProp name="Argument.name">p6_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}-0.5,p6_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lon" elementType="Argument">
                <stringProp name="Argument.name">center_lon</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,center_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon" elementType="Argument">
                <stringProp name="Argument.name">p1_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon}+0,p1_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon" elementType="Argument">
                <stringProp name="Argument.name">p2_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0,p2_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon" elementType="Argument">
                <stringProp name="Argument.name">p3_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0.5,p3_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon" elementType="Argument">
                <stringProp name="Argument.name">p4_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+1,p4_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon" elementType="Argument">
                <stringProp name="Argument.name">p5_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+1,p5_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon" elementType="Argument">
                <stringProp name="Argument.name">p6_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0.5,p6_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AK DB BBox 5x5" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AK DB BBox 5x5" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND processingType IN (&apos;L0&apos;,&apos;L1&apos;) 
      AND centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},5,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},5,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AK DB BBox 10x10" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AK DB BBox 10x10" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND processingType IN (&apos;L0&apos;,&apos;L1&apos;) 
      AND centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},10,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(60,70, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},10,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="US DB BBox 1x1" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="US DB BBox 1x1" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND processingType IN (&apos;L0&apos;,&apos;L1&apos;) 
      AND centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-120,-80,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},1,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(30,50, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},1,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="US DB BBox 5x5" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="US DB BBox 5x5" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND processingType IN (&apos;L0&apos;,&apos;L1&apos;) 
      AND centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-120,-80,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},5,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(30,50, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},5,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="US DB BBox 10x10" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="US DB BBox 10x10" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND processingType IN (&apos;L0&apos;,&apos;L1&apos;) 
      AND centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-120,-80,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},10,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(30,50, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},10,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="US DB BBox 15x15" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1297450605000</longProp>
        <longProp name="ThreadGroup.end_time">1297450605000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="US DB BBox 15x15" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal() FROM 
    data_product
  WHERE
  platformType IN (&apos;E2&apos;,&apos;R1&apos;)  AND startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND processingType IN (&apos;L0&apos;,&apos;L1&apos;) 
      AND centerLon BETWEEN ${west} AND ${east}
      AND centerLat BETWEEN ${south} AND ${north}
     ORDER BY startTime DESC</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="west" elementType="Argument">
                <stringProp name="Argument.name">west</stringProp>
                <stringProp name="Argument.value">${__Random(-120,-80,west)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="east" elementType="Argument">
                <stringProp name="Argument.name">east</stringProp>
                <stringProp name="Argument.value">${__intSum(${west},15,east)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="south" elementType="Argument">
                <stringProp name="Argument.name">south</stringProp>
                <stringProp name="Argument.value">${__Random(30,50, south)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="north" elementType="Argument">
                <stringProp name="Argument.name">north</stringProp>
                <stringProp name="Argument.value">${__intSum(${south},15,north)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AK DB Poly 4 points 1x1" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1306955430000</longProp>
        <longProp name="ThreadGroup.end_time">1306955430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AK DB Poly 4 points 1x1" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal()
    from
      data_product
  WHERE
  startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;)
      AND sdo_anyinteract(shape,
        sdo_geometry(
          2003, 8307, NULL, sdo_elem_info_array(1, 1003, 1),
          sdo_ordinate_array(
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;,
&apos;${p2_lon}&apos;,&apos;${p2_lat}&apos;,
&apos;${p3_lon}&apos;,&apos;${p3_lat}&apos;,
&apos;${p4_lon}&apos;,&apos;${p4_lat}&apos;,
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;
))) = &apos;TRUE&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="latitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lat" elementType="Argument">
                <stringProp name="Argument.name">center_lat</stringProp>
                <stringProp name="Argument.value">${__Random(60,70,center_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat" elementType="Argument">
                <stringProp name="Argument.name">p1_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat}+0,p1_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat" elementType="Argument">
                <stringProp name="Argument.name">p2_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+1,p2_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat" elementType="Argument">
                <stringProp name="Argument.name">p3_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+1,p3_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat" elementType="Argument">
                <stringProp name="Argument.name">p4_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0,p4_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lon" elementType="Argument">
                <stringProp name="Argument.name">center_lon</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,center_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon" elementType="Argument">
                <stringProp name="Argument.name">p1_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon}+0,p1_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon" elementType="Argument">
                <stringProp name="Argument.name">p2_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0,p2_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon" elementType="Argument">
                <stringProp name="Argument.name">p3_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+1,p3_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon" elementType="Argument">
                <stringProp name="Argument.name">p4_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+1,p4_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AK SDO Poly 4 points 1x1" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1306955430000</longProp>
        <longProp name="ThreadGroup.end_time">1306955430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="AK SDO DB Poly 4 points 1x1" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal()
    from
      data_product
  WHERE
  startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;)
      AND sdo_filter(shape,
        sdo_geometry(
          2003, 8307, NULL, sdo_elem_info_array(1, 1003, 1),
          sdo_ordinate_array(
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;,
&apos;${p2_lon}&apos;,&apos;${p2_lat}&apos;,
&apos;${p3_lon}&apos;,&apos;${p3_lat}&apos;,
&apos;${p4_lon}&apos;,&apos;${p4_lat}&apos;,
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;
))) = &apos;TRUE&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="latitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lat" elementType="Argument">
                <stringProp name="Argument.name">center_lat</stringProp>
                <stringProp name="Argument.value">${__Random(60,70,center_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat" elementType="Argument">
                <stringProp name="Argument.name">p1_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat}+0,p1_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat" elementType="Argument">
                <stringProp name="Argument.name">p2_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+1,p2_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat" elementType="Argument">
                <stringProp name="Argument.name">p3_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+1,p3_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat" elementType="Argument">
                <stringProp name="Argument.name">p4_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lat}+0,p4_lat)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lon" elementType="Argument">
                <stringProp name="Argument.name">center_lon</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,center_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon" elementType="Argument">
                <stringProp name="Argument.name">p1_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon}+0,p1_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon" elementType="Argument">
                <stringProp name="Argument.name">p2_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+0,p2_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon" elementType="Argument">
                <stringProp name="Argument.name">p3_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+1,p3_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon" elementType="Argument">
                <stringProp name="Argument.name">p4_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(${p1_lon}+1,p4_lon)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SplineVisualizer" testclass="ResultCollector" testname="Spline Visualizer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true"/>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SDO Filter" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1306955430000</longProp>
        <longProp name="ThreadGroup.end_time">1306955430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SDO Filter 7 points" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal()
    from
      data_product
  WHERE
  startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;)
      AND sdo_filter(shape,
        sdo_geometry(
          2003, 8307, NULL, sdo_elem_info_array(1, 1003, 1),
          sdo_ordinate_array(
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;,
&apos;${p2_lon}&apos;,&apos;${p2_lat}&apos;,
&apos;${p3_lon}&apos;,&apos;${p3_lat}&apos;,
&apos;${p4_lon}&apos;,&apos;${p4_lat}&apos;,
&apos;${p5_lon}&apos;,&apos;${p5_lat}&apos;,
&apos;${p6_lon}&apos;,&apos;${p6_lat}&apos;,
&apos;${p7_lon}&apos;,&apos;${p7_lat}&apos;,
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;
))) = &apos;TRUE&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">center_lon_deg</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,center_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p1_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+0,p1_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p1_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p1_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon" elementType="Argument">
                <stringProp name="Argument.name">p1_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p1_lon_deg}&apos; + &apos;.&apos; + &apos;${p1_lon_min}&apos;, p1_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p2_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+1,p2_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p2_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p2_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon" elementType="Argument">
                <stringProp name="Argument.name">p2_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p2_lon_deg}&apos; + &apos;.&apos; + &apos;${p2_lon_min}&apos;, p2_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p3_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+2,p3_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p3_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p3_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon" elementType="Argument">
                <stringProp name="Argument.name">p3_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p3_lon_deg}&apos; + &apos;.&apos; + &apos;${p3_lon_min}&apos;, p3_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p4_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+2,p4_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p4_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p4_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon" elementType="Argument">
                <stringProp name="Argument.name">p4_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p4_lon_deg}&apos; + &apos;.&apos; + &apos;${p4_lon_min}&apos;, p4_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p5_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+1,p5_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p5_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p5_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon" elementType="Argument">
                <stringProp name="Argument.name">p5_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p5_lon_deg}&apos; + &apos;.&apos; + &apos;${p5_lon_min}&apos;, p5_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p6_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+1,p6_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p6_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p6_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon" elementType="Argument">
                <stringProp name="Argument.name">p6_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p6_lon_deg}&apos; + &apos;.&apos; + &apos;${p6_lon_min}&apos;, p6_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p7_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+0,p7_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p7_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p7_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lon" elementType="Argument">
                <stringProp name="Argument.name">p7_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p7_lon_deg}&apos; + &apos;.&apos; + &apos;${p7_lon_min}&apos;, p7_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="latitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">center_lat_deg</stringProp>
                <stringProp name="Argument.value">${__Random(60,70,center_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p1_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}+0,p1_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p1_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p1_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat" elementType="Argument">
                <stringProp name="Argument.name">p1_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p1_lat_deg}&apos; + &apos;.&apos; + &apos;${p1_lat_min}&apos;, p1_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p2_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}+0,p2_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p2_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p2_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat" elementType="Argument">
                <stringProp name="Argument.name">p2_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p2_lat_deg}&apos; + &apos;.&apos; + &apos;${p2_lat_min}&apos;, p2_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p3_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}+0,p3_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p3_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p3_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat" elementType="Argument">
                <stringProp name="Argument.name">p3_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p3_lat_deg}&apos; + &apos;.&apos; + &apos;${p3_lat_min}&apos;, p3_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p4_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-2,p4_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p4_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p4_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat" elementType="Argument">
                <stringProp name="Argument.name">p4_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p4_lat_deg}&apos; + &apos;.&apos; + &apos;${p4_lat_min}&apos;, p4_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p5_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-2,p5_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p5_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p5_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat" elementType="Argument">
                <stringProp name="Argument.name">p5_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p5_lat_deg}&apos; + &apos;.&apos; + &apos;${p5_lat_min}&apos;, p5_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p6_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-1,p6_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p6_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p6_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat" elementType="Argument">
                <stringProp name="Argument.name">p6_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p6_lat_deg}&apos; + &apos;.&apos; + &apos;${p6_lat_min}&apos;, p6_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p7_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-1,p7_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p7_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p7_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lat" elementType="Argument">
                <stringProp name="Argument.name">p7_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p7_lat_deg}&apos; + &apos;.&apos; + &apos;${p7_lat_min}&apos;, p7_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Variable Spatial Poly 7 points" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1306955430000</longProp>
        <longProp name="ThreadGroup.end_time">1306955430000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="DB Poly 7 points" enabled="true">
          <stringProp name="dataSource"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select XMLELEMENT(&quot;ROW&quot;,
  XMLForest(
    granuleName,
    productName,
    platform,
    sensor,
    beamModeType,
    TRIM(beamModeDesc) beamModeDesc,
    orbit,
    pathNumber,
    frameNumber,
    TO_CHAR(acquisitionDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS acquisitionDate,
    TO_CHAR(processingDate, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS processingDate,
    processingType,
    TO_CHAR(startTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS startTime,
    TO_CHAR(endTime, &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS endTime,
    centerLat,
    centerLon,
    nearStartLat,
    nearStartLon,
    nearEndLat,
    nearEndLon,
    farStartLat,
    farStartLon,
    farEndLat,
    farEndLon,
    faradayRotation,
    ascendingDescending,
    url, 
    bytes,
    ROUND( bytes/1024/1024, 2 ) AS fileSize,
    offNadirAngle,
    md5sum,
    granuleDesc,
    granuleType,
    fileName,
    shape
  )).getStringVal()
    from
      data_product
  WHERE
  startTime BETWEEN TO_DATE(&apos;1998-06-01&apos;,&apos;YYYY-MM-DD&apos;) AND TO_DATE(&apos;2008-06-01&apos;,&apos;YYYY-MM-DD&apos;)
      AND sdo_anyinteract(shape,
        sdo_geometry(
          2003, 8307, NULL, sdo_elem_info_array(1, 1003, 1),
          sdo_ordinate_array(
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;,
&apos;${p2_lon}&apos;,&apos;${p2_lat}&apos;,
&apos;${p3_lon}&apos;,&apos;${p3_lat}&apos;,
&apos;${p4_lon}&apos;,&apos;${p4_lat}&apos;,
&apos;${p5_lon}&apos;,&apos;${p5_lat}&apos;,
&apos;${p6_lon}&apos;,&apos;${p6_lat}&apos;,
&apos;${p7_lon}&apos;,&apos;${p7_lat}&apos;,
&apos;${p1_lon}&apos;,&apos;${p1_lat}&apos;
))) = &apos;TRUE&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="latitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">center_lat_deg</stringProp>
                <stringProp name="Argument.value">${__Random(60,70,center_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p1_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}+0,p1_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p1_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p1_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lat" elementType="Argument">
                <stringProp name="Argument.name">p1_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p1_lat_deg}&apos; + &apos;.&apos; + &apos;${p1_lat_min}&apos;, p1_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p2_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}+0,p2_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p2_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p2_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lat" elementType="Argument">
                <stringProp name="Argument.name">p2_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p2_lat_deg}&apos; + &apos;.&apos; + &apos;${p2_lat_min}&apos;, p2_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p3_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}+0,p3_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p3_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p3_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lat" elementType="Argument">
                <stringProp name="Argument.name">p3_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p3_lat_deg}&apos; + &apos;.&apos; + &apos;${p3_lat_min}&apos;, p3_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p4_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-2,p4_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p4_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p4_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lat" elementType="Argument">
                <stringProp name="Argument.name">p4_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p4_lat_deg}&apos; + &apos;.&apos; + &apos;${p4_lat_min}&apos;, p4_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p5_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-2,p5_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p5_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p5_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lat" elementType="Argument">
                <stringProp name="Argument.name">p5_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p5_lat_deg}&apos; + &apos;.&apos; + &apos;${p5_lat_min}&apos;, p5_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p6_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-1,p6_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p6_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p6_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lat" elementType="Argument">
                <stringProp name="Argument.name">p6_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p6_lat_deg}&apos; + &apos;.&apos; + &apos;${p6_lat_min}&apos;, p6_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lat_deg" elementType="Argument">
                <stringProp name="Argument.name">p7_lat_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lat_deg}-1,p7_lat_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lat_min" elementType="Argument">
                <stringProp name="Argument.name">p7_lat_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p7_lat_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lat" elementType="Argument">
                <stringProp name="Argument.name">p7_lat</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p7_lat_deg}&apos; + &apos;.&apos; + &apos;${p7_lat_min}&apos;, p7_lat )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="longitudes" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="center_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">center_lon_deg</stringProp>
                <stringProp name="Argument.value">${__Random(-160,-140,center_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p1_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+0,p1_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p1_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p1_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p1_lon" elementType="Argument">
                <stringProp name="Argument.name">p1_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p1_lon_deg}&apos; + &apos;.&apos; + &apos;${p1_lon_min}&apos;, p1_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p2_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+1,p2_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p2_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p2_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p2_lon" elementType="Argument">
                <stringProp name="Argument.name">p2_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p2_lon_deg}&apos; + &apos;.&apos; + &apos;${p2_lon_min}&apos;, p2_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p3_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+2,p3_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p3_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p3_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p3_lon" elementType="Argument">
                <stringProp name="Argument.name">p3_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p3_lon_deg}&apos; + &apos;.&apos; + &apos;${p3_lon_min}&apos;, p3_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p4_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+2,p4_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p4_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p4_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p4_lon" elementType="Argument">
                <stringProp name="Argument.name">p4_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p4_lon_deg}&apos; + &apos;.&apos; + &apos;${p4_lon_min}&apos;, p4_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p5_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+1,p5_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p5_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p5_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p5_lon" elementType="Argument">
                <stringProp name="Argument.name">p5_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p5_lon_deg}&apos; + &apos;.&apos; + &apos;${p5_lon_min}&apos;, p5_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p6_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+1,p6_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p6_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p6_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p6_lon" elementType="Argument">
                <stringProp name="Argument.name">p6_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p6_lon_deg}&apos; + &apos;.&apos; + &apos;${p6_lon_min}&apos;, p6_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lon_deg" elementType="Argument">
                <stringProp name="Argument.name">p7_lon_deg</stringProp>
                <stringProp name="Argument.value">${__javaScript(${center_lon_deg}+0,p7_lon_deg)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lon_min" elementType="Argument">
                <stringProp name="Argument.name">p7_lon_min</stringProp>
                <stringProp name="Argument.value">${__Random(0,99,p7_lon_min)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="p7_lon" elementType="Argument">
                <stringProp name="Argument.name">p7_lon</stringProp>
                <stringProp name="Argument.value">${__javaScript(&apos;${p7_lon_deg}&apos; + &apos;.&apos; + &apos;${p7_lon_min}&apos;, p7_lon )}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
