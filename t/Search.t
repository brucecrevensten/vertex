use strict;
use warnings;
use Test::More;
use HTTP::Request::Common;
use Data::Dumper;
use Apache2::Const q(:http);
use URSA2::SearchRequest;
use Catalyst::Test 'URSA2';

our( $E1_assets, $E2_J1_assets, $file_list1, $file_list2, $file_list_json, $broken_json);

#
# test descriptions can be found in spreadsheet linked at http://wiki.asf.alaska.edu/asf/Ursa2SearchApiSpec
#

my $surn = 'services/search/param'; # urn of the service were testing
my $jurn = 'services/search/json'; # urn of the service were testing

my $bbox = '-135.755,25.555,-135.756,35.556';
my @platforms = (q(R1 E1 E2 J1 A3));
my @startdates = (
'1985-04-12T23:20:50.52Z',
'1996-12-19T16:39:57-08:00',
'1990-12-31T23:59:60Z',
'1990-12-31T15:59:60-08:00',
'1937-01-01T12:00:27.87+00:20');
my @enddates = (
'1985-05-12T23:20:50.52Z',
'1997-01-19T16:39:57-08:00',
'1991-01-20T23:59:60Z',
'1991-01-22T15:59:60-08:00',
'1937-02-01T12:00:27.87+00:20');
my @granules = (q(R1_35587_SWB_F356 R1_34558_SWB_F356 R1_34601_SWB_F357));

# Sequence of tests against the controller as mediated through HTTP

BEGIN { use_ok 'URSA2::Controller::services' }
use ok "Test::WWW::Mechanize::Catalyst" => "URSA2";

my $mech = Test::WWW::Mechanize::Catalyst->new(catalyst_app => 'URSA2', autolint => 0);

###### doesn't need DB connections
$mech->get_ok('services', "1.1: web service exists");

$mech->post($surn);
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1: get HTTP 400 for missing bbox field');

$mech->get($surn, { bbox => 'invalid'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for missing bbox field');

$mech->get($jurn, { query => '{"bbox":"invalid"}'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for missing bbox field');

$mech->post($surn, { bbox => '-165,656-164,67' } );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for invalid bbox field');

$mech->get($surn, { bbox => '1,2,3'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for invalid bbox field');

$mech->get($jurn, { query => '{"bbox":"1,2,3"}'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for invalid bbox field');

$mech->get($surn, { bbox => '1.111,2.22222,0,4.444a'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for invalid bbox field');

$mech->get($jurn, { query => '{"bbox":"1.111,2.22222,0,4.444a"}'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.1.2: get HTTP 400 for missing bbox field');

$mech->post($surn, { processing => 'L1,browse' });
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '3.2.2: get HTTP 400 for missing bbox field when other parameters are present');

$mech->post($jurn, { query => '{"processing":["L1","browse"]}' });
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '3.2.2, 2.11: get HTTP 400 for missing bbox field when other parameters are present');

$mech->post($surn, { bbox=>$bbox, platform => 'BadPlatform'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.2: get HTTP 400 for invalid platform');

$mech->post($jurn, { query => '{"bbox":"-135,64.5,-135.1,64.6","platform":["BadPlatform"]}'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.2, 2.11: get HTTP 400 for missing bbox field when other parameters are present');

$mech->post($surn, { bbox=>$bbox, start => 'BadDate'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.3: get HTTP 400 for invalid start date field');

$mech->post($jurn, { query => '{"bbox":"-135,64.5,-135.1,64.6","start":["BadDate"]}'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.3, 2.11: get HTTP 400 for missing bbox field when other parameters are present');

$mech->post($surn, { bbox=>$bbox, end => 'BadDate'} );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.4: get HTTP 400 for invalid end date field');

$mech->post($jurn, { query => '{"bbox":"-135,64.5,-135.1,64.6","end":["BadDate"]}'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.4, 2.11: get HTTP 400 for missing bbox field when other parameters are present');

$mech->post($surn, { bbox=>$bbox, processing => 'BadProcessing'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.6: get HTTP 400 for invalid processing level field');

$mech->post($jurn, { query => '{"bbox":"-135,64.5,-135.1,64.6","processing":["BadProcessing"]}'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.6, 2.11: get HTTP 400 for missing bbox field when other parameters are present');

$mech->post($surn, { bbox=>$bbox, beam => 'BadBeam' });
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.7: get HTTP 400 for invalid beam mode field');

$mech->post($jurn, { query => '{"bbox":"-135,64.5,-135.1,64.6","beam":["BadBeam"]}'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.7, 2.11: get HTTP 400 for bad beam mode');

$mech->post($surn, { 'bbox' => '-135,64.5,-135.1,64.6', format => 'invalid' } );
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.5: check that invalid format request responds with error');

$mech->post($jurn, { query => '{"bbox":"-135,64.5,-135.1,64.6","format":"invalid"}'});
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.5, 2.11: get HTTP 400 for invalid format request');

$mech->post($jurn, { query => $broken_json });
is($mech->status(), Apache2::Const::HTTP_BAD_REQUEST, '2.11.3: broken JSON returns a 400');

###### needs DB connections
SKIP: {
  skip 'not testing features requiring a database connection', 33, unless $ENV{TEST_DATABASE};

  $mech->post_ok($surn, { frame => '200' }, '2.15.1: fetching by frame makes bbox optional');
  $mech->post_ok($surn, { path => '200' }, '2.16.1: fetching by path makes bbox optional');

#TODO: add better (more specific) tests for this
#  $mech->post_ok($surn, { path => '200-204,254,105-108,606' }, '2.16: fetching by path ranges');
#  $mech->post_ok($surn, { frame => '200-204,255,305-308,402' }, '2.16: fetching by frame ranges');

  #TODO: match these explicitly against a result set
#  $mech->post_ok($surn, { platform=>'E1', frame=>'287', format=>'list' }, 'testing OK response for searching by frame');
#  $mech->post_ok($surn, { platform=>'R2', direction=>'ascending', format=>'list' }, 'testing OK response for searching by direction');
#  $mech->post_ok($surn, { platform=>'A3', path=>'1234', format=>'list' }, 'testing OK response for searching via a single path');

  #TODO: match these explicitly against a result set
  $mech->get_ok($surn.'?products='.$file_list1.'&format=list','testing OK response for fetching file list via GET');
  $mech->post_ok($surn, { products => $file_list2, format=>'list' }, 'testing OK response for fetching file list via POST');
  $mech->post_ok($surn, { query => $file_list_json }, 'testing OK response for fetching file list via JSON POST');

  $mech->post_ok($surn, { bbox=>$bbox }, '2.1: server accepts comma-separated bbox param');
  like($mech->content(), qr/metalink/, '2.5: checking default fallback to metalink format');

  $mech->post_ok($surn, {granule_list=>'R1_35587_SWB_F356,R1_34558_SWB_F356,R1_34601_SWB_F357'}, 'checking fetching explicit granule list');
  like($mech->content(), qr/metalink/, '2.5: checking default fallback to metalink format with explicit granule list');
  like($mech->content(), qr/.+/, '3.2.1: if granule_list is provided, no other parameters are required');

  $mech->post($surn, { bbox=>$bbox, end=>'1927-01-01' });
  is($mech->status(), Apache2::Const::HTTP_NO_CONTENT, '3.1: get HTTP 204 for no search results with specified constraints');
  
  $mech->post($surn, { granule_list=>'R1_65186_ST3_F291', format=>'csv'});
  is($mech->status(), Apache2::Const::HTTP_OK, '3: get HTTP 200 for successful search');
  is($mech->content(), test_results_1(), '3: get expected results for specific granule list, test explicit CSV format structure');

  $mech->post($surn, { granule_list=>',R1_65186_ST3_F291, E1_00404_STD_F161,,', format=>'list'});
  is($mech->status(), Apache2::Const::HTTP_OK, '3: get HTTP 200 for successful search');
  is($mech->content(), qq(E1_00404_STD_F161,E1_00404_STD_F161,E1_00404_STD_F161,R1_65186_ST3_F291,R1_65186_ST3_F291,R1_65186_ST3_F291,), '3: get expected results for slightly weird granule list (extra spaces and commas)');

  # testing search restriction by platform: this region definitely has E1, E2, JERS, R1 assets.
  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', platform => 'E1', format=>'list' } );
  is($mech->content(), $E1_assets, '2.2, 3.7: check for filtering search results by a single platform type' );

  # testing search restriction by multiple platforms: this region definitely has E1, E2, JERS, R1 assets.
  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', platform => 'J1,E2', format => 'list' } );
  is($mech->content(), $E2_J1_assets, '2.2, 3.7: check for filtering search results by multiple platforms' );

  $mech->post($surn, { 'bbox' => '-135,64.5,-135.1,64.6', platform => 'J1,E2', format => 'metalink' } );
  my $r = $mech->res();
  is($r->header('Content-Type'),'application/metalink+xml', '3.9.2: metalink returns application/metalink+xml content type');

  # testing search restriction by date range: start
  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', start => '2010-10-01T00:00:00UTC', format => 'list' } );
  is($mech->content(), qq(E2_81316_STD_F289,E2_81316_STD_F289,E2_81316_STD_F289,E2_81316_STD_F287,E2_81316_STD_F287,E2_81316_STD_F287,E2_80815_STD_F289,E2_80815_STD_F289,E2_80815_STD_F289,E2_80815_STD_F287,E2_80815_STD_F287,E2_80815_STD_F287,E2_80772_STD_F289,E2_80772_STD_F289,E2_80772_STD_F289,E2_80772_STD_F287,E2_80772_STD_F287,E2_80772_STD_F287,), '2.3, 3.4: check for search results bounded by start date' );
  
  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', end => '1991-10-01T00:00:00UTC', format => 'list' } );
  is($mech->content(), q(E1_00885_STD_F289,E1_00885_STD_F289,E1_00885_STD_F289,E1_00885_STD_F287,E1_00885_STD_F287,E1_00885_STD_F287,E1_00455_STD_F289,E1_00455_STD_F289,E1_00455_STD_F289,E1_00455_STD_F287,E1_00455_STD_F287,E1_00455_STD_F287,E1_00404_STD_F163,E1_00404_STD_F163,E1_00404_STD_F163,E1_00404_STD_F161,E1_00404_STD_F161,E1_00404_STD_F161,), '2.4, 3.5: check for search results bounded by end date' );

  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', start => '1998-06-01T00:00:00Z', end => '1998-06-30T11:59:59Z', format=>'list' } );
  is($mech->content(), q(E2_16687_STD_F289,E2_16687_STD_F289,E2_16687_STD_F289,E2_16687_STD_F287,E2_16687_STD_F287,E2_16687_STD_F287,J1_34549_STD_F289,J1_34549_STD_F289,J1_34549_STD_F289,J1_34549_STD_F288,J1_34549_STD_F288,J1_34549_STD_F287,J1_34549_STD_F287,J1_34549_STD_F287,J1_34534_STD_F289,J1_34534_STD_F289,J1_34534_STD_F289,R1_13442_ST3_F161,R1_13442_ST3_F161,R1_13442_ST3_F161,), '2.5, 3.6: check for search results bounded by start and end date' );

  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', end => '2010-10-01T00:00:00UTC', processing => 'browse', format=>'csv' } );
  $mech->content_unlike( qr/zip/, '2.6, 3.8: testing processing level parameter (browse only)');
   
  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', end => '2010-10-01T00:00:00UTC', processing => 'L0,L1', format=>'csv' } );
  $mech->content_unlike( qr/jpg/, '2.6, 3.8: testing processing level parameter (L0, L1 only)');

  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', start => '1998-06-01T00:00:00Z', end => '1998-06-30T11:59:59Z', processing => 'L0,L1', format=>'csv', platform=>'E2,R1' } );
  $r = $mech->res();
  is($r->header('Content-Type'),'text/csv', '3.9.1: csv returns text/csv content type');
  unlike($mech->content(), qr/jpg/, '2.8: testing restriction of multiple search parameters to exclude browse images');

  $mech->post_ok($surn, { 'bbox' => '-135,64.5,-135.1,64.6', start => '1998-06-01T00:00:00Z', end => '1998-06-30T11:59:59Z', processing => 'L0,L1', format=>'list', platform=>'E2,R1' } );
  is($mech->content(), q(R1_13442_ST3_F161,E2_16687_STD_F289,E2_16687_STD_F287,R1_13442_ST3_F161,E2_16687_STD_F289,E2_16687_STD_F287,), '2.8: tests multiple search parameters (start, end, platform, processing)');

  $mech->post_ok($jurn, { query=>'{"bbox":"-135,64.5,-135.1,64.6","start":"1998-06-01T00:00:00Z","end":"1998-06-30T11:59:59Z","processing":["L0","L1"],"format":"list","platform":["E2","R1"]}'} );
  is($mech->content(), q(R1_13442_ST3_F161,E2_16687_STD_F289,E2_16687_STD_F287,R1_13442_ST3_F161,E2_16687_STD_F289,E2_16687_STD_F287,), '2.8: tests multiple search parameters (start, end, platform, processing)');

  $mech->post($surn, {'bbox' => '-135,64.5,-135.1,64.6', granule_list=>'R1_35587_SWB_F356,R1_34558_SWB_F356,R1_34601_SWB_F357', format=>'list'});
  is( $mech->content(), q(R1_34558_SWB_F356,R1_34558_SWB_F356,R1_34601_SWB_F357,R1_34601_SWB_F357,R1_35587_SWB_F356,R1_35587_SWB_F356,), '2.9.1: granule_list overrides other search params if present');

  $mech->post($surn, { granule_list=>'R1_35587_SWB_F356,R1_34558_SWB_F356,R1_34601_SWB_F357', processing => 'browse', format => 'list' });
  unlike($mech->content(), qr/zip/, '2.9.2: processing level parameter can be provided with granule list');

}

sub test_results_1 {
  return q~"Granule Name","Platform","Sensor","Beam Mode","Orbit","Path Number","Frame Number","Acquisition Date","Processing Date","Processing Level","Start Time","End Time","Center Lat","Center Lon","Near Start Lat","Near Start Lon","Far Start Lat","Far Start Lon","Near End Lat","Near End Lon","Far End Lat","Far End Lon","Faraday Rotation","Off Nadir Angle","Ascending or Descending?","Size","URL",
  "R1_65186_ST3_F291","RADARSAT-1","SAR","Radarsat-1 Standard Beam 3 SAR","NA","NA","291","30-APR-08 04.24.27.583296 PM","06-NOV-10 11.48.50.862325 AM","L0","30-APR-08 04.24.11.029075 PM","30-APR-08 04.24.27.583296 PM","63.5168","-148.9877","63.907182","-147.729675","62.950125","-148.24324","64.077966","-149.764519","63.117173","-150.211368","NA","NA","DESCENDING","http://test-online.asf.alaska.edu:80/BROWSE/R1/R1_65186_ST3_F291.jpg",
  "R1_65186_ST3_F291","RADARSAT-1","SAR","Radarsat-1 Standard Beam 3 SAR","NA","NA","291","30-APR-08 04.24.27.583296 PM","06-NOV-10 11.47.31.213813 AM","L0","30-APR-08 04.24.11.029075 PM","30-APR-08 04.24.27.583296 PM","63.5168","-148.9877","63.907182","-147.729675","62.950125","-148.24324","64.077966","-149.764519","63.117173","-150.211368","NA","NA","DESCENDING","http://test-online.asf.alaska.edu:80/L0/R1/R1_65186_ST3_L0_F291.zip",
  "R1_65186_ST3_F291","RADARSAT-1","SAR","Radarsat-1 Standard Beam 3 SAR","NA","NA","291","30-APR-08 04.24.27.583296 PM","06-NOV-10 11.49.34.435414 AM","L0","30-APR-08 04.24.11.029075 PM","30-APR-08 04.24.27.583296 PM","63.5168","-148.9877","63.907182","-147.729675","62.950125","-148.24324","64.077966","-149.764519","63.117173","-150.211368","NA","NA","DESCENDING","http://test-online.asf.alaska.edu:80/L1/R1/R1_65186_ST3_F291.zip",~
}

BEGIN {

our $E1_assets = qq(E1_25066_STD_F289,E1_25066_STD_F289,E1_25066_STD_F289,E1_25066_STD_F287,E1_25066_STD_F287,E1_25066_STD_F287,E1_24328_STD_F163,E1_24328_STD_F163,E1_24328_STD_F163,E1_24328_STD_F161,E1_24328_STD_F161,E1_24328_STD_F161,E1_24099_STD_F163,E1_24099_STD_F163,E1_24099_STD_F163,E1_24099_STD_F161,E1_24099_STD_F161,E1_24099_STD_F161,E1_23563_STD_F289,E1_23563_STD_F289,E1_23563_STD_F289,E1_23563_STD_F287,E1_23563_STD_F287,E1_23563_STD_F287,E1_23334_STD_F289,E1_23334_STD_F289,E1_23334_STD_F289,E1_23334_STD_F287,E1_23334_STD_F287,E1_23334_STD_F287,E1_23062_STD_F289,E1_23062_STD_F289,E1_23062_STD_F289,E1_23062_STD_F287,E1_23062_STD_F287,E1_23062_STD_F287,E1_22833_STD_F289,E1_22833_STD_F289,E1_22833_STD_F289,E1_22833_STD_F288,E1_22833_STD_F288,E1_22833_STD_F287,E1_22833_STD_F287,E1_22833_STD_F287,E1_22790_STD_F289,E1_22790_STD_F289,E1_22790_STD_F289,E1_22790_STD_F287,E1_22790_STD_F287,E1_22790_STD_F287,E1_22332_STD_F289,E1_22332_STD_F289,E1_22332_STD_F289,E1_22332_STD_F287,E1_22332_STD_F287,E1_22332_STD_F287,E1_22289_STD_F289,E1_22289_STD_F289,E1_22289_STD_F289,E1_22289_STD_F287,E1_22289_STD_F287,E1_22289_STD_F287,E1_22095_STD_F163,E1_22095_STD_F163,E1_22095_STD_F163,E1_22095_STD_F161,E1_22095_STD_F161,E1_22095_STD_F161,E1_22060_STD_F289,E1_22060_STD_F289,E1_22060_STD_F289,E1_22060_STD_F287,E1_22060_STD_F287,E1_22060_STD_F287,E1_21788_STD_F289,E1_21788_STD_F289,E1_21788_STD_F289,E1_21788_STD_F287,E1_21788_STD_F287,E1_21788_STD_F287,E1_21322_STD_F163,E1_21322_STD_F163,E1_21322_STD_F163,E1_21322_STD_F161,E1_21322_STD_F161,E1_21322_STD_F161,E1_21287_STD_F289,E1_21287_STD_F289,E1_21287_STD_F289,E1_21287_STD_F287,E1_21287_STD_F287,E1_21287_STD_F287,E1_21058_STD_F289,E1_21058_STD_F289,E1_21058_STD_F289,E1_21058_STD_F287,E1_21058_STD_F287,E1_21058_STD_F287,E1_20328_STD_F289,E1_20328_STD_F289,E1_20328_STD_F289,E1_20328_STD_F287,E1_20328_STD_F287,E1_20328_STD_F287,E1_19827_STD_F289,E1_19827_STD_F289,E1_19827_STD_F287,E1_19827_STD_F287,E1_19784_STD_F289,E1_19784_STD_F289,E1_19784_STD_F289,E1_19784_STD_F287,E1_19784_STD_F287,E1_19784_STD_F287,E1_19326_STD_F289,E1_19326_STD_F289,E1_19326_STD_F289,E1_19326_STD_F287,E1_19326_STD_F287,E1_19326_STD_F287,E1_19283_STD_F289,E1_19283_STD_F289,E1_19283_STD_F289,E1_19283_STD_F287,E1_19283_STD_F287,E1_19283_STD_F287,E1_19197_STD_F289,E1_19197_STD_F289,E1_19197_STD_F289,E1_19197_STD_F287,E1_19197_STD_F287,E1_19197_STD_F287,E1_18953_STD_F289,E1_18953_STD_F289,E1_18953_STD_F289,E1_18910_STD_F289,E1_18910_STD_F289,E1_18910_STD_F289,E1_18910_STD_F287,E1_18910_STD_F287,E1_18910_STD_F287,E1_18666_STD_F289,E1_18666_STD_F289,E1_18666_STD_F289,E1_18666_STD_F287,E1_18666_STD_F287,E1_18666_STD_F287,E1_18379_STD_F289,E1_18379_STD_F289,E1_18379_STD_F289,E1_18379_STD_F287,E1_18379_STD_F287,E1_18379_STD_F287,E1_18092_STD_F289,E1_18092_STD_F289,E1_18092_STD_F289,E1_18092_STD_F287,E1_18092_STD_F287,E1_18092_STD_F287,E1_17604_STD_F289,E1_17604_STD_F289,E1_17604_STD_F289,E1_17604_STD_F288,E1_17604_STD_F288,E1_17604_STD_F287,E1_17604_STD_F287,E1_17604_STD_F287,E1_17561_STD_F289,E1_17561_STD_F289,E1_17561_STD_F289,E1_17561_STD_F287,E1_17561_STD_F287,E1_17561_STD_F287,E1_17317_STD_F289,E1_17317_STD_F289,E1_17317_STD_F289,E1_17317_STD_F288,E1_17317_STD_F288,E1_17317_STD_F287,E1_17317_STD_F287,E1_17317_STD_F287,E1_16542_STD_F289,E1_16542_STD_F289,E1_16542_STD_F289,E1_16499_STD_F289,E1_16499_STD_F289,E1_16499_STD_F289,E1_16499_STD_F287,E1_16499_STD_F287,E1_16499_STD_F287,E1_16212_STD_F289,E1_16212_STD_F289,E1_16212_STD_F289,E1_16212_STD_F287,E1_16212_STD_F287,E1_16212_STD_F287,E1_15480_STD_F289,E1_15480_STD_F289,E1_15480_STD_F289,E1_15437_STD_F289,E1_15437_STD_F289,E1_15437_STD_F289,E1_15437_STD_F287,E1_15437_STD_F287,E1_15437_STD_F287,E1_15429_STD_F163,E1_15429_STD_F163,E1_15429_STD_F163,E1_15429_STD_F161,E1_15429_STD_F161,E1_15429_STD_F161,E1_14863_STD_F289,E1_14863_STD_F289,E1_14863_STD_F289,E1_14863_STD_F287,E1_14863_STD_F287,E1_14863_STD_F287,E1_14662_STD_F289,E1_14662_STD_F289,E1_14662_STD_F289,E1_14375_STD_F289,E1_14375_STD_F289,E1_14375_STD_F289,E1_14375_STD_F287,E1_14375_STD_F287,E1_14375_STD_F287,E1_14281_STD_F161,E1_14281_STD_F161,E1_14281_STD_F161,E1_14109_STD_F161,E1_14109_STD_F161,E1_14109_STD_F161,E1_13550_STD_F161,E1_13550_STD_F161,E1_13550_STD_F161,E1_12776_STD_F161,E1_12776_STD_F161,E1_12776_STD_F161,E1_12232_STD_F163,E1_12232_STD_F163,E1_12232_STD_F163,E1_12232_STD_F162,E1_12232_STD_F162,E1_12232_STD_F162,E1_12197_STD_F289,E1_12197_STD_F289,E1_12197_STD_F289,E1_12197_STD_F287,E1_12197_STD_F287,E1_12197_STD_F287,E1_12189_STD_F163,E1_12189_STD_F163,E1_12189_STD_F163,E1_12189_STD_F162,E1_12189_STD_F162,E1_12189_STD_F162,E1_11925_STD_F289,E1_11925_STD_F289,E1_11925_STD_F287,E1_11925_STD_F287,E1_11502_STD_F161,E1_11502_STD_F161,E1_11502_STD_F161,E1_11467_STD_F289,E1_11467_STD_F289,E1_11467_STD_F289,E1_11467_STD_F287,E1_11467_STD_F287,E1_11467_STD_F287,E1_10966_STD_F289,E1_10966_STD_F289,E1_10966_STD_F289,E1_10694_STD_F289,E1_10694_STD_F289,E1_10694_STD_F289,E1_10694_STD_F287,E1_10694_STD_F287,E1_10694_STD_F287,E1_10465_STD_F289,E1_10465_STD_F289,E1_10465_STD_F289,E1_10465_STD_F287,E1_10465_STD_F287,E1_10465_STD_F287,E1_10422_STD_F289,E1_10422_STD_F289,E1_10422_STD_F289,E1_10422_STD_F287,E1_10422_STD_F287,E1_10422_STD_F287,E1_09964_STD_F289,E1_09964_STD_F289,E1_09964_STD_F289,E1_09692_STD_F289,E1_09692_STD_F289,E1_09692_STD_F289,E1_09692_STD_F287,E1_09692_STD_F287,E1_09692_STD_F287,E1_09463_STD_F289,E1_09463_STD_F289,E1_09463_STD_F289,E1_09463_STD_F287,E1_09463_STD_F287,E1_09463_STD_F287,E1_09420_STD_F289,E1_09420_STD_F289,E1_09420_STD_F289,E1_09420_STD_F287,E1_09420_STD_F287,E1_09420_STD_F287,E1_08997_STD_F161,E1_08997_STD_F161,E1_08997_STD_F161,E1_08962_STD_F289,E1_08962_STD_F289,E1_08962_STD_F289,E1_08962_STD_F287,E1_08962_STD_F287,E1_08962_STD_F287,E1_08954_STD_F163,E1_08954_STD_F163,E1_08954_STD_F161,E1_08954_STD_F161,E1_08919_STD_F289,E1_08919_STD_F289,E1_08919_STD_F289,E1_08919_STD_F287,E1_08919_STD_F287,E1_08919_STD_F287,E1_08461_STD_F289,E1_08461_STD_F289,E1_08461_STD_F289,E1_08461_STD_F287,E1_08461_STD_F287,E1_08461_STD_F287,E1_08418_STD_F289,E1_08418_STD_F289,E1_08418_STD_F289,E1_08418_STD_F287,E1_08418_STD_F287,E1_08418_STD_F287,E1_08189_STD_F289,E1_08189_STD_F289,E1_08189_STD_F289,E1_08189_STD_F287,E1_08189_STD_F287,E1_08189_STD_F287,E1_07960_STD_F289,E1_07960_STD_F289,E1_07960_STD_F289,E1_07960_STD_F287,E1_07960_STD_F287,E1_07960_STD_F287,E1_07917_STD_F289,E1_07917_STD_F289,E1_07917_STD_F289,E1_07917_STD_F287,E1_07917_STD_F287,E1_07917_STD_F287,E1_07688_STD_F289,E1_07688_STD_F289,E1_07688_STD_F289,E1_07688_STD_F287,E1_07688_STD_F287,E1_07688_STD_F287,E1_06457_STD_F289,E1_06457_STD_F289,E1_06457_STD_F289,E1_06457_STD_F287,E1_06457_STD_F287,E1_06457_STD_F287,E1_06414_STD_F289,E1_06414_STD_F289,E1_06414_STD_F289,E1_06414_STD_F287,E1_06414_STD_F287,E1_06414_STD_F287,E1_05913_STD_F289,E1_05913_STD_F289,E1_05913_STD_F289,E1_05913_STD_F287,E1_05913_STD_F287,E1_05913_STD_F287,E1_05455_STD_F289,E1_05455_STD_F289,E1_05455_STD_F289,E1_05455_STD_F287,E1_05455_STD_F287,E1_05455_STD_F287,E1_04453_STD_F289,E1_04453_STD_F289,E1_04453_STD_F289,E1_04453_STD_F287,E1_04453_STD_F287,E1_04453_STD_F287,E1_04410_STD_F289,E1_04410_STD_F289,E1_04410_STD_F289,E1_04410_STD_F287,E1_04410_STD_F287,E1_04410_STD_F287,E1_04181_STD_F289,E1_04181_STD_F289,E1_04181_STD_F289,E1_04181_STD_F287,E1_04181_STD_F287,E1_04181_STD_F287,E1_04173_STD_F163,E1_04173_STD_F163,E1_04173_STD_F163,E1_04173_STD_F161,E1_04173_STD_F161,E1_04173_STD_F161,E1_01831_STD_F289,E1_01831_STD_F289,E1_01831_STD_F289,E1_01831_STD_F287,E1_01831_STD_F287,E1_01831_STD_F287,E1_01530_STD_F289,E1_01530_STD_F289,E1_01530_STD_F289,E1_01530_STD_F287,E1_01530_STD_F287,E1_01530_STD_F287,E1_01487_STD_F289,E1_01487_STD_F289,E1_01487_STD_F289,E1_01487_STD_F287,E1_01487_STD_F287,E1_01487_STD_F287,E1_01444_STD_F289,E1_01444_STD_F289,E1_01444_STD_F289,E1_01444_STD_F287,E1_01444_STD_F287,E1_01444_STD_F287,E1_01272_STD_F289,E1_01272_STD_F289,E1_01272_STD_F289,E1_01272_STD_F287,E1_01272_STD_F287,E1_01272_STD_F287,E1_01143_STD_F289,E1_01143_STD_F289,E1_01143_STD_F289,E1_01143_STD_F287,E1_01143_STD_F287,E1_01143_STD_F287,E1_00885_STD_F289,E1_00885_STD_F289,E1_00885_STD_F289,E1_00885_STD_F287,E1_00885_STD_F287,E1_00885_STD_F287,E1_00455_STD_F289,E1_00455_STD_F289,E1_00455_STD_F289,E1_00455_STD_F287,E1_00455_STD_F287,E1_00455_STD_F287,E1_00404_STD_F163,E1_00404_STD_F163,E1_00404_STD_F163,E1_00404_STD_F161,E1_00404_STD_F161,E1_00404_STD_F161,);

our $E2_J1_assets = q(J1_35852_STD_F289,J1_35852_STD_F289,J1_35852_STD_F289,J1_34549_STD_F289,J1_34549_STD_F289,J1_34549_STD_F289,J1_34549_STD_F288,J1_34549_STD_F288,J1_34549_STD_F287,J1_34549_STD_F287,J1_34549_STD_F287,J1_34534_STD_F289,J1_34534_STD_F289,J1_34534_STD_F289,J1_33890_STD_F289,J1_33890_STD_F289,J1_33890_STD_F289,J1_33890_STD_F288,J1_33890_STD_F288,J1_33890_STD_F287,J1_33890_STD_F287,J1_33890_STD_F287,J1_33875_STD_F289,J1_33875_STD_F289,J1_33875_STD_F289,J1_33875_STD_F288,J1_33875_STD_F288,J1_33860_STD_F289,J1_33860_STD_F289,J1_33860_STD_F289,J1_33860_STD_F288,J1_33860_STD_F288,J1_33231_STD_F289,J1_33231_STD_F289,J1_33231_STD_F289,J1_33231_STD_F287,J1_33231_STD_F287,J1_33231_STD_F287,J1_33216_STD_F289,J1_33216_STD_F289,J1_33216_STD_F289,J1_32557_STD_F289,J1_32557_STD_F289,J1_32557_STD_F289,J1_32542_STD_F289,J1_32542_STD_F289,J1_32542_STD_F289,J1_31913_STD_F289,J1_31913_STD_F289,J1_31913_STD_F289,J1_31913_STD_F287,J1_31913_STD_F287,J1_31913_STD_F287,J1_30595_STD_F289,J1_30595_STD_F289,J1_30595_STD_F289,J1_30595_STD_F287,J1_30595_STD_F287,J1_30595_STD_F287,J1_30565_STD_F289,J1_30565_STD_F289,J1_30565_STD_F289,J1_29906_STD_F289,J1_29906_STD_F289,J1_25308_STD_F289,J1_25308_STD_F289,J1_25308_STD_F289,J1_25308_STD_F288,J1_25308_STD_F288,J1_24664_STD_F289,J1_24664_STD_F289,J1_24664_STD_F289,J1_24664_STD_F287,J1_24664_STD_F287,J1_24664_STD_F287,J1_24005_STD_F289,J1_24005_STD_F289,J1_24005_STD_F289,J1_24005_STD_F287,J1_24005_STD_F287,J1_24005_STD_F287,J1_23990_STD_F289,J1_23990_STD_F289,J1_23990_STD_F289,J1_23990_STD_F288,J1_23990_STD_F288,E2_81316_STD_F289,E2_81316_STD_F289,E2_81316_STD_F289,E2_81316_STD_F287,E2_81316_STD_F287,E2_81316_STD_F287,E2_80815_STD_F289,E2_80815_STD_F289,E2_80815_STD_F289,E2_80815_STD_F287,E2_80815_STD_F287,E2_80815_STD_F287,E2_80772_STD_F289,E2_80772_STD_F289,E2_80772_STD_F289,E2_80772_STD_F287,E2_80772_STD_F287,E2_80772_STD_F287,E2_80578_STD_F163,E2_80578_STD_F163,E2_80578_STD_F163,E2_80578_STD_F161,E2_80578_STD_F161,E2_80578_STD_F161,E2_80543_STD_F289,E2_80543_STD_F289,E2_80543_STD_F289,E2_80543_STD_F287,E2_80543_STD_F287,E2_80543_STD_F287,E2_80314_STD_F289,E2_80314_STD_F289,E2_80314_STD_F289,E2_80314_STD_F287,E2_80314_STD_F287,E2_80314_STD_F287,E2_80306_STD_F163,E2_80306_STD_F163,E2_80306_STD_F163,E2_80306_STD_F161,E2_80306_STD_F161,E2_80306_STD_F161,E2_80271_STD_F289,E2_80271_STD_F289,E2_80271_STD_F289,E2_80271_STD_F287,E2_80271_STD_F287,E2_80271_STD_F287,E2_74566_STD_F163,E2_74566_STD_F163,E2_74566_STD_F163,E2_74566_STD_F161,E2_74566_STD_F161,E2_74566_STD_F161,E2_74030_STD_F289,E2_74030_STD_F289,E2_74030_STD_F289,E2_74030_STD_F287,E2_74030_STD_F287,E2_74030_STD_F287,E2_73257_STD_F289,E2_73257_STD_F289,E2_73257_STD_F289,E2_73257_STD_F287,E2_73257_STD_F287,E2_73257_STD_F287,E2_72756_STD_F289,E2_72756_STD_F289,E2_72756_STD_F289,E2_72756_STD_F287,E2_72756_STD_F287,E2_72756_STD_F287,E2_72298_STD_F289,E2_72298_STD_F289,E2_72298_STD_F289,E2_72298_STD_F288,E2_72298_STD_F288,E2_72298_STD_F287,E2_72298_STD_F287,E2_72298_STD_F287,E2_72026_STD_F289,E2_72026_STD_F289,E2_72026_STD_F289,E2_72026_STD_F288,E2_72026_STD_F288,E2_72026_STD_F287,E2_72026_STD_F287,E2_72026_STD_F287,E2_71754_STD_F289,E2_71754_STD_F289,E2_71754_STD_F289,E2_71754_STD_F288,E2_71754_STD_F288,E2_71754_STD_F287,E2_71754_STD_F287,E2_71754_STD_F287,E2_71525_STD_F289,E2_71525_STD_F289,E2_71525_STD_F289,E2_71525_STD_F287,E2_71525_STD_F287,E2_71525_STD_F287,E2_71296_STD_F289,E2_71296_STD_F289,E2_71296_STD_F289,E2_71296_STD_F287,E2_71296_STD_F287,E2_71296_STD_F287,E2_71024_STD_F289,E2_71024_STD_F289,E2_71024_STD_F289,E2_71024_STD_F287,E2_71024_STD_F287,E2_71024_STD_F287,E2_70251_STD_F288,E2_70251_STD_F288,E2_70022_STD_F289,E2_70022_STD_F289,E2_70022_STD_F289,E2_70022_STD_F287,E2_70022_STD_F287,E2_70022_STD_F287,E2_69828_STD_F161,E2_69828_STD_F161,E2_69828_STD_F161,E2_69793_STD_F289,E2_69793_STD_F289,E2_69793_STD_F289,E2_69793_STD_F287,E2_69793_STD_F287,E2_69793_STD_F287,E2_69556_STD_F162,E2_69556_STD_F162,E2_69556_STD_F161,E2_69556_STD_F161,E2_69521_STD_F289,E2_69521_STD_F289,E2_69521_STD_F289,E2_69521_STD_F287,E2_69521_STD_F287,E2_69521_STD_F287,E2_69292_STD_F289,E2_69292_STD_F289,E2_69292_STD_F289,E2_69292_STD_F287,E2_69292_STD_F287,E2_69292_STD_F287,E2_69284_STD_F163,E2_69284_STD_F163,E2_69284_STD_F163,E2_69284_STD_F161,E2_69284_STD_F161,E2_69284_STD_F161,E2_69249_STD_F289,E2_69249_STD_F289,E2_69249_STD_F289,E2_69249_STD_F287,E2_69249_STD_F287,E2_69249_STD_F287,E2_69020_STD_F289,E2_69020_STD_F289,E2_69020_STD_F289,E2_69020_STD_F287,E2_69020_STD_F287,E2_69020_STD_F287,E2_69012_STD_F163,E2_69012_STD_F163,E2_69012_STD_F163,E2_69012_STD_F161,E2_69012_STD_F161,E2_69012_STD_F161,E2_68748_STD_F289,E2_68748_STD_F289,E2_68748_STD_F289,E2_68748_STD_F287,E2_68748_STD_F287,E2_68748_STD_F287,E2_68282_STD_F163,E2_68282_STD_F163,E2_68282_STD_F163,E2_68282_STD_F161,E2_68282_STD_F161,E2_68282_STD_F161,E2_68247_STD_F289,E2_68247_STD_F289,E2_68247_STD_F287,E2_68247_STD_F287,E2_68018_STD_F288,E2_68018_STD_F288,E2_67552_STD_F163,E2_67552_STD_F163,E2_67552_STD_F163,E2_67552_STD_F161,E2_67552_STD_F161,E2_67552_STD_F161,E2_67245_STD_F289,E2_67245_STD_F289,E2_67245_STD_F289,E2_67245_STD_F287,E2_67245_STD_F287,E2_67245_STD_F287,E2_64282_STD_F289,E2_64282_STD_F289,E2_64282_STD_F289,E2_64282_STD_F287,E2_64282_STD_F287,E2_64282_STD_F287,E2_63816_STD_F161,E2_63816_STD_F161,E2_63816_STD_F161,E2_63781_STD_F289,E2_63781_STD_F289,E2_63781_STD_F289,E2_63781_STD_F287,E2_63781_STD_F287,E2_63781_STD_F287,E2_63509_STD_F289,E2_63509_STD_F289,E2_63509_STD_F289,E2_63509_STD_F287,E2_63509_STD_F287,E2_63509_STD_F287,E2_62542_STD_F163,E2_62542_STD_F163,E2_62542_STD_F163,E2_62542_STD_F162,E2_62542_STD_F162,E2_62542_STD_F161,E2_62542_STD_F161,E2_62542_STD_F161,E2_62270_STD_F163,E2_62270_STD_F163,E2_62270_STD_F163,E2_62270_STD_F161,E2_62270_STD_F161,E2_62270_STD_F161,E2_48751_STD_F289,E2_48751_STD_F289,E2_48751_STD_F289,E2_48751_STD_F287,E2_48751_STD_F287,E2_48751_STD_F287,E2_48708_STD_F289,E2_48708_STD_F289,E2_48708_STD_F289,E2_48708_STD_F287,E2_48708_STD_F287,E2_48708_STD_F287,E2_48250_STD_F289,E2_48250_STD_F289,E2_48250_STD_F289,E2_48250_STD_F287,E2_48250_STD_F287,E2_48250_STD_F287,E2_47706_STD_F289,E2_47706_STD_F289,E2_47706_STD_F289,E2_47706_STD_F287,E2_47706_STD_F287,E2_47706_STD_F287,E2_45201_STD_F289,E2_45201_STD_F289,E2_45201_STD_F289,E2_45201_STD_F287,E2_45201_STD_F287,E2_45201_STD_F287,E2_42467_STD_F289,E2_42467_STD_F289,E2_42467_STD_F289,E2_42467_STD_F287,E2_42467_STD_F287,E2_42467_STD_F287,E2_39189_STD_F289,E2_39189_STD_F289,E2_39189_STD_F289,E2_39189_STD_F288,E2_39189_STD_F288,E2_39189_STD_F287,E2_39189_STD_F287,E2_39189_STD_F287,E2_38960_STD_F289,E2_38960_STD_F289,E2_38960_STD_F289,E2_26198_STD_F163,E2_26198_STD_F163,E2_26198_STD_F163,E2_26198_STD_F161,E2_26198_STD_F161,E2_26198_STD_F161,E2_24738_STD_F161,E2_24738_STD_F161,E2_24738_STD_F161,E2_24431_STD_F289,E2_24431_STD_F289,E2_24431_STD_F289,E2_24431_STD_F287,E2_24431_STD_F287,E2_24431_STD_F287,E2_22928_STD_F289,E2_22928_STD_F289,E2_22928_STD_F289,E2_22928_STD_F287,E2_22928_STD_F287,E2_22928_STD_F287,E2_22427_STD_F289,E2_22427_STD_F289,E2_22427_STD_F289,E2_22427_STD_F287,E2_22427_STD_F287,E2_22427_STD_F287,E2_21425_STD_F289,E2_21425_STD_F289,E2_21425_STD_F289,E2_21425_STD_F287,E2_21425_STD_F287,E2_21425_STD_F287,E2_20423_STD_F289,E2_20423_STD_F289,E2_20423_STD_F289,E2_20423_STD_F288,E2_20423_STD_F288,E2_20423_STD_F287,E2_20423_STD_F287,E2_20423_STD_F287,E2_17918_STD_F289,E2_17918_STD_F289,E2_17918_STD_F289,E2_17918_STD_F287,E2_17918_STD_F287,E2_17918_STD_F287,E2_17145_STD_F289,E2_17145_STD_F289,E2_17145_STD_F289,E2_17145_STD_F287,E2_17145_STD_F287,E2_17145_STD_F287,E2_16687_STD_F289,E2_16687_STD_F289,E2_16687_STD_F289,E2_16687_STD_F287,E2_16687_STD_F287,E2_16687_STD_F287,E2_16186_STD_F289,E2_16186_STD_F289,E2_16186_STD_F289,E2_16186_STD_F288,E2_16186_STD_F288,E2_16186_STD_F287,E2_16186_STD_F287,E2_16186_STD_F287,E2_14640_STD_F289,E2_14640_STD_F289,E2_14640_STD_F289,E2_14640_STD_F287,E2_14640_STD_F287,E2_14640_STD_F287,E2_13137_STD_F289,E2_13137_STD_F289,E2_13137_STD_F289,E2_13137_STD_F287,E2_13137_STD_F287,E2_13137_STD_F287,E2_12679_STD_F289,E2_12679_STD_F289,E2_12679_STD_F289,E2_12679_STD_F288,E2_12679_STD_F288,E2_12679_STD_F287,E2_12679_STD_F287,E2_12679_STD_F287,E2_12636_STD_F289,E2_12636_STD_F289,E2_12636_STD_F289,E2_12636_STD_F287,E2_12636_STD_F287,E2_12636_STD_F287,E2_08170_STD_F289,E2_08170_STD_F289,E2_08170_STD_F289,E2_08170_STD_F287,E2_08170_STD_F287,E2_08170_STD_F287,E2_05393_STD_F289,E2_05393_STD_F289,E2_05393_STD_F289,E2_05393_STD_F287,E2_05393_STD_F287,E2_05393_STD_F287,E2_04884_STD_F163,E2_04884_STD_F163,E2_04884_STD_F163,E2_04884_STD_F161,E2_04884_STD_F161,E2_04884_STD_F161,E2_04698_STD_F161,E2_04698_STD_F161,E2_04698_STD_F161,E2_04154_STD_F163,E2_04154_STD_F163,E2_04154_STD_F163,E2_04154_STD_F161,E2_04154_STD_F161,E2_04154_STD_F161,E2_03890_STD_F289,E2_03890_STD_F289,E2_03890_STD_F289,E2_03890_STD_F287,E2_03890_STD_F287,E2_03890_STD_F287,E2_03661_STD_F289,E2_03661_STD_F289,E2_03661_STD_F287,E2_03661_STD_F287,E2_03389_STD_F289,E2_03389_STD_F289,E2_03389_STD_F289,E2_03389_STD_F287,E2_03389_STD_F287,E2_03389_STD_F287,E2_02659_STD_F289,E2_02659_STD_F289,E2_02659_STD_F289,E2_02659_STD_F287,E2_02659_STD_F287,E2_02659_STD_F287,E2_02422_STD_F163,E2_02422_STD_F163,E2_02422_STD_F163,E2_02422_STD_F161,E2_02422_STD_F161,E2_02422_STD_F161,);

our $raw_xml = q(<?xml version="1.0"?>
<rows>
<ROW><GRANULENAME>R1_35587_SWB_F356</GRANULENAME><PRODUCTNAME>R1_35587_SWB_F356</PRODUCTNAME><PLATFORM>RADARSAT-1</PLATFORM><SENSOR>SAR</SENSOR><BEAMMODETYPE>SWB</BEAMMODETYPE><BEAMMODEDESC>Radarsat-1 SCANSAR Wide Beam B SAR                                                                                                                                                                                                                              </BEAMMODEDESC><ORBIT>35587</ORBIT><PATHNUMBER>NA</PATHNUMBER><FRAMENUMBER>356</FRAMENUMBER><ACQUISITIONDATE>29-AUG-02 02.58.00.338027 PM</ACQUISITIONDATE><PROCESSINGDATE>28-NOV-10 04.52.26.673592 PM</PROCESSINGDATE><PROCESSINGTYPE>BROWSE</PROCESSINGTYPE><STARTTIME>29-AUG-02 02.56.43.339536 PM</STARTTIME><ENDTIME>29-AUG-02 02.58.00.338027 PM</ENDTIME><CENTERLAT>37.6236</CENTERLAT><CENTERLON>-133.2796</CENTERLON><NEARSTARTLAT>39.581685</NEARSTARTLAT><NEARSTARTLON>-129.992791</NEARSTARTLON><NEARENDLAT>35.055549</NEARENDLAT><NEARENDLON>-131.250025</NEARENDLON><FARSTARTLAT>40.132374</FARSTARTLAT><FARSTARTLON>-135.473428</FARSTARTLON><FARENDLAT>35.595865</FARENDLAT><FARENDLON>-136.39153</FARENDLON><FARADAYROTATION>NA</FARADAYROTATION><ASCENDINGDESCENDING>DESCENDING</ASCENDINGDESCENDING><URL>http://test-online.asf.alaska.edu:80/BROWSE/R1/R1_35587_SWB_F356.jpg</URL><BYTES>136151</BYTES><MD5SUM>d7931262cdc8d6020cce2d422d061efd</MD5SUM><GRANULEDESC>Radarsat-1 ScanSAR Data in ASF Frame Size</GRANULEDESC><GRANULETYPE>R1_SCANSAR_FRAME</GRANULETYPE><FILENAME>R1_35587_SWB_F356.jpg</FILENAME><SHAPE><SDO_GTYPE>2003</SDO_GTYPE><SDO_SRID>8307</SDO_SRID><SDO_ELEM_INFO><NUMBER>1</NUMBER><NUMBER>1003</NUMBER><NUMBER>1</NUMBER></SDO_ELEM_INFO><SDO_ORDINATES><NUMBER>-129.992791</NUMBER><NUMBER>39.581685</NUMBER><NUMBER>-135.473428</NUMBER><NUMBER>40.132374</NUMBER><NUMBER>-136.39153</NUMBER><NUMBER>35.595865</NUMBER><NUMBER>-131.250025</NUMBER><NUMBER>35.055549</NUMBER><NUMBER>-129.992791</NUMBER><NUMBER>39.581685</NUMBER></SDO_ORDINATES></SHAPE></ROW>
<ROW><GRANULENAME>R1_35587_SWB_F356</GRANULENAME><PRODUCTNAME>R1_35587_SWB_F356</PRODUCTNAME><PLATFORM>RADARSAT-1</PLATFORM><SENSOR>SAR</SENSOR><BEAMMODETYPE>SWB</BEAMMODETYPE><BEAMMODEDESC>Radarsat-1 SCANSAR Wide Beam B SAR                                                                                                                                                                                                                              </BEAMMODEDESC><ORBIT>35587</ORBIT><PATHNUMBER>NA</PATHNUMBER><FRAMENUMBER>356</FRAMENUMBER><ACQUISITIONDATE>29-AUG-02 02.58.00.338027 PM</ACQUISITIONDATE><PROCESSINGDATE>28-NOV-10 04.52.34.767383 PM</PROCESSINGDATE><PROCESSINGTYPE>L1</PROCESSINGTYPE><STARTTIME>29-AUG-02 02.56.43.339536 PM</STARTTIME><ENDTIME>29-AUG-02 02.58.00.338027 PM</ENDTIME><CENTERLAT>37.6236</CENTERLAT><CENTERLON>-133.2796</CENTERLON><NEARSTARTLAT>39.581685</NEARSTARTLAT><NEARSTARTLON>-129.992791</NEARSTARTLON><NEARENDLAT>35.055549</NEARENDLAT><NEARENDLON>-131.250025</NEARENDLON><FARSTARTLAT>40.132374</FARSTARTLAT><FARSTARTLON>-135.473428</FARSTARTLON><FARENDLAT>35.595865</FARENDLAT><FARENDLON>-136.39153</FARENDLON><FARADAYROTATION>NA</FARADAYROTATION><ASCENDINGDESCENDING>DESCENDING</ASCENDINGDESCENDING><URL>http://test-online.asf.alaska.edu:80/L1/R1/R1_35587_SWB_F356.zip</URL><BYTES>64780747</BYTES><MD5SUM>6d1e8c41d1e873aada9916a1b884b4db</MD5SUM><GRANULEDESC>Radarsat-1 ScanSAR Data in ASF Frame Size</GRANULEDESC><GRANULETYPE>R1_SCANSAR_FRAME</GRANULETYPE><FILENAME>R1_35587_SWB_F356.zip</FILENAME><SHAPE><SDO_GTYPE>2003</SDO_GTYPE><SDO_SRID>8307</SDO_SRID><SDO_ELEM_INFO><NUMBER>1</NUMBER><NUMBER>1003</NUMBER><NUMBER>1</NUMBER></SDO_ELEM_INFO><SDO_ORDINATES><NUMBER>-129.992791</NUMBER><NUMBER>39.581685</NUMBER><NUMBER>-135.473428</NUMBER><NUMBER>40.132374</NUMBER><NUMBER>-136.39153</NUMBER><NUMBER>35.595865</NUMBER><NUMBER>-131.250025</NUMBER><NUMBER>35.055549</NUMBER><NUMBER>-129.992791</NUMBER><NUMBER>39.581685</NUMBER></SDO_ORDINATES></SHAPE></ROW></rows>
);

our $file_list1 = q(R1_38175_ST2_L0_F287.zip,R1_38175_ST2_F287.zip,R1_38175_ST2_F287.jpg);
our $file_list2 = q(E2_59888_STD_F285.jpg,E2_59888_STD_F285.jpg,E2_59888_STD_F285.jpg,E2_59888_STD_F287.jpg,E2_59888_STD_F287.jpg,E2_59888_STD_F287.jpg,E2_62350_STD_F286.jpg,E2_62350_STD_F286.jpg,E2_62350_STD_F287.jpg,E2_62350_STD_F287.jpg,E2_62350_STD_F287.jpg,E2_62614_STD_F163.jpg,E2_62614_STD_F163.jpg,E2_62614_STD_F163.jpg,E2_62614_STD_F164.jpg,E2_62614_STD_F164.jpg,E2_62622_STD_F285.jpg,E2_62622_STD_F285.jpg,E2_62622_STD_F285.jpg,E2_62622_STD_F287.jpg,E2_62622_STD_F287.jpg,E2_62622_STD_F287.jpg,E2_62886_STD_F163.jpg,E2_62886_STD_F163.jpg,E2_62886_STD_F163.jpg,E2_62886_STD_F164.jpg,E2_62886_STD_F164.jpg,E2_62894_STD_F285.jpg,E2_62894_STD_F285.jpg,E2_62894_STD_F285.jpg,E2_62894_STD_F287.jpg,E2_62894_STD_F287.jpg,E2_62894_STD_F287.jpg,E2_63387_STD_F163.jpg,E2_63387_STD_F163.jpg,E2_63387_STD_F163.jpg,E2_63395_STD_F285.jpg,E2_63395_STD_F285.jpg,E2_63395_STD_F285.jpg,E2_63395_STD_F287.jpg,E2_63395_STD_F287.jpg,E2_63395_STD_F287.jpg,E2_63888_STD_F163.jpg,E2_63888_STD_F163.jpg,E2_63888_STD_F163.jpg,E2_63888_STD_F164.jpg,E2_63888_STD_F164.jpg,E2_63896_STD_F285.jpg,E2_63896_STD_F285.jpg,E2_63896_STD_F285.jpg,E2_63896_STD_F287.jpg,E2_63896_STD_F287.jpg,E2_63896_STD_F287.jpg,E2_64661_STD_F163.jpg,E2_64661_STD_F163.jpg,E2_64661_STD_F163.jpg,E2_64890_STD_F163.jpg,E2_64890_STD_F163.jpg,E2_64890_STD_F163.jpg,E2_64898_STD_F287.jpg,E2_64898_STD_F287.jpg,E2_64898_STD_F287.jpg,E2_65127_STD_F287.jpg,E2_65127_STD_F287.jpg,E2_65127_STD_F287.jpg,E2_65356_STD_F287.jpg,E2_65356_STD_F287.jpg,E2_65356_STD_F287.jpg,E2_65391_STD_F163.jpg,E2_65391_STD_F163.jpg,E2_65391_STD_F163.jpg,E2_65399_STD_F287.jpg,E2_65399_STD_F287.jpg,E2_65399_STD_F287.jpg,E2_66129_STD_F287.jpg,E2_66129_STD_F287.jpg,E2_66129_STD_F287.jpg,E2_66859_STD_F287.jpg,E2_66859_STD_F287.jpg,E2_66859_STD_F287.jpg,E2_66902_STD_F287.jpg,E2_66902_STD_F287.jpg,E2_66902_STD_F287.jpg,E2_67632_STD_F286.jpg,E2_67632_STD_F286.jpg,E2_67667_STD_F163.jpg,E2_67667_STD_F163.jpg,E2_67667_STD_F163.jpg,E2_67853_STD_F163.jpg,E2_67853_STD_F163.jpg,E2_67853_STD_F163.jpg,E2_67853_STD_F164.jpg,E2_67853_STD_F164.jpg,E2_67853_STD_F165.jpg,E2_67853_STD_F165.jpg,E2_67853_STD_F165.jpg,E2_67861_STD_F287.jpg,E2_67861_STD_F287.jpg,E2_67861_STD_F287.jpg,E2_68125_STD_F163.jpg);

our $file_list_json = q({"products":["E2_59888_STD_F285.jpg","E2_59888_STD_F285.jpg","E2_59888_STD_F285.jpg","E2_59888_STD_F287.jpg","E2_59888_STD_F287.jpg","E2_59888_STD_F287.jpg","E2_62350_STD_F286.jpg","E2_62350_STD_F286.jpg","E2_62350_STD_F287.jpg","E2_62350_STD_F287.jpg","E2_62350_STD_F287.jpg","E2_62614_STD_F163.jpg","E2_62614_STD_F163.jpg","E2_62614_STD_F163.jpg","E2_62614_STD_F164.jpg","E2_62614_STD_F164.jpg","E2_62622_STD_F285.jpg","E2_62622_STD_F285.jpg","E2_62622_STD_F285.jpg","E2_62622_STD_F287.jpg","E2_62622_STD_F287.jpg","E2_62622_STD_F287.jpg","E2_62886_STD_F163.jpg","E2_62886_STD_F163.jpg","E2_62886_STD_F163.jpg","E2_62886_STD_F164.jpg","E2_62886_STD_F164.jpg","E2_62894_STD_F285.jpg","E2_62894_STD_F285.jpg","E2_62894_STD_F285.jpg","E2_62894_STD_F287.jpg","E2_62894_STD_F287.jpg","E2_62894_STD_F287.jpg","E2_63387_STD_F163.jpg","E2_63387_STD_F163.jpg","E2_63387_STD_F163.jpg","E2_63395_STD_F285.jpg","E2_63395_STD_F285.jpg","E2_63395_STD_F285.jpg","E2_63395_STD_F287.jpg","E2_63395_STD_F287.jpg","E2_63395_STD_F287.jpg","E2_63888_STD_F163.jpg","E2_63888_STD_F163.jpg","E2_63888_STD_F163.jpg","E2_63888_STD_F164.jpg","E2_63888_STD_F164.jpg","E2_63896_STD_F285.jpg","E2_63896_STD_F285.jpg","E2_63896_STD_F285.jpg","E2_63896_STD_F287.jpg","E2_63896_STD_F287.jpg","E2_63896_STD_F287.jpg","E2_64661_STD_F163.jpg","E2_64661_STD_F163.jpg","E2_64661_STD_F163.jpg","E2_64890_STD_F163.jpg","E2_64890_STD_F163.jpg","E2_64890_STD_F163.jpg","E2_64898_STD_F287.jpg","E2_64898_STD_F287.jpg","E2_64898_STD_F287.jpg","E2_65127_STD_F287.jpg","E2_65127_STD_F287.jpg","E2_65127_STD_F287.jpg","E2_65356_STD_F287.jpg","E2_65356_STD_F287.jpg","E2_65356_STD_F287.jpg","E2_65391_STD_F163.jpg","E2_65391_STD_F163.jpg","E2_65391_STD_F163.jpg","E2_65399_STD_F287.jpg","E2_65399_STD_F287.jpg","E2_65399_STD_F287.jpg","E2_66129_STD_F287.jpg","E2_66129_STD_F287.jpg","E2_66129_STD_F287.jpg","E2_66859_STD_F287.jpg","E2_66859_STD_F287.jpg","E2_66859_STD_F287.jpg","E2_66902_STD_F287.jpg","E2_66902_STD_F287.jpg","E2_66902_STD_F287.jpg","E2_67632_STD_F286.jpg","E2_67632_STD_F286.jpg","E2_67667_STD_F163.jpg","E2_67667_STD_F163.jpg","E2_67667_STD_F163.jpg","E2_67853_STD_F163.jpg","E2_67853_STD_F163.jpg","E2_67853_STD_F163.jpg","E2_67853_STD_F164.jpg","E2_67853_STD_F164.jpg","E2_67853_STD_F165.jpg","E2_67853_STD_F165.jpg","E2_67853_STD_F165.jpg","E2_67861_STD_F287.jpg","E2_67861_STD_F287.jpg","E2_67861_STD_F287.jpg","E2_68125_STD_F163.jpg"],"format":"list"});

our $broken_json = q({"products":["abc"});

}

done_testing();
